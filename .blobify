# Default context - all content
## This output contains core project configuration files including build settings, CI workflows, and licensing information
+pyproject.toml
+.pre-commit-config.yaml
+.github\workflows\test.yml
+.blobify
+misc\blobify-dark.svg
+LICENSE
@copy-to-clipboard=true
@show-excluded=false
@enable-scrubbing=false
@output-line-numbers=false
@output-index=false
@output-metadata=false

[docs-only]
# Context for documentation review (use with -x docs-only or --context=docs-only)
## This output contains all Markdown documentation files from the project
## Review this documentation for clarity, completeness, and accuracy
## Check for broken links, outdated information, and missing sections
-**
+*.md
@copy-to-clipboard=true
@show-excluded=false
@output-metadata=false

[tests]
# Context for tests review
## This output contains all test files with line numbers enabled for debugging purposes
## Analyze test coverage, identify missing test cases, and check for test quality
## Focus on edge cases, error handling, and integration test scenarios
-**
+tests/**
@copy-to-clipboard=true
@show-excluded=false
@show-index=false
@output-metadata=false
@output-line-numbers=true
@enable-scrubbing=false

[code-only: default]
# Context for code files only
## This output contains all source code files including Python, JavaScript, TypeScript, and other programming languages
## Perform comprehensive code review focusing on architecture, design patterns, and maintainability
## Identify potential bugs, security vulnerabilities, and performance improvements
-**
+README.md
+blobify/**

[method-signatures:default]
# Enhanced context for method signatures and structure analysis
# Extracts class definitions, method signatures, type hints, decorators, and return statements from Python files
## This output contains Python class definitions, method signatures, decorators, return statements, imports, docstrings, and type hints
## Analyze the API structure and design patterns used in the codebase
## Focus on method signatures, type annotations, and documentation quality
@filter="signatures","^ *(class\s+\w+.*:|def\s+\w+.*:|@\w+.*|async\s+def\s+\w+.*:)","*.py"
@filter="returns","^ *(return\s+.*|yield\s+.*)","*.py"
@filter="imports","^ *(from\s+\w+.*import.*|import\s+\w+.*)","*.py"
@filter="docstrings","^ *\"\"\".*|^ *'''.*|^ *r?\"\"\".*|^ *r?'''.*","*.py"
@filter="type-hints",".*:\s*\w+.*->.*|.*:\s*[A-Z]\w*\[.*\]|.*:\s*(str|int|bool|float|list|dict|tuple|set|Optional|Union|Any|Callable)","*.py"
@output-line-numbers=false

[comprehensive-signatures:default]
# More comprehensive signature extraction including constants and error handling from Python files
## This output contains Python class definitions, function signatures, decorators, return/yield statements, imports, constants, exception handling blocks, and docstrings
## Analyze the complete code structure including error handling patterns and constants
## Focus on exception handling best practices and constant definitions
@filter="classes","^ *class\s+\w+.*:","*.py"
@filter="functions","^ *(def\s+\w+.*:|async\s+def\s+\w+.*:)","*.py"
@filter="decorators","^ *@\w+.*","*.py"
@filter="returns","^ *(return\s+.*|yield\s+.*)","*.py"
@filter="imports","^ *(from\s+\w+.*import.*|import\s+\w+.*)","*.py"
@filter="constants","^ *[A-Z_][A-Z0-9_]*\s*=.*","*.py"
@filter="exceptions","^ *(raise\s+.*|except\s+.*:|try:|finally:)","*.py"
@filter="docstrings","^ *\"\"\".*|^ *'''.*","*.py"
@output-line-numbers=false

[api-reference:comprehensive-signatures]
# API Reference - Public interfaces and method signatures
# Extracts all public classes, functions, and their complete signatures
# Includes docstrings and type hints for comprehensive API documentation
## This output contains public API interfaces including class definitions, function signatures, module documentation, export declarations, code comments from Python files, and the complete README documentation
## Generate comprehensive API documentation focusing on public interfaces
## Identify missing docstrings, inconsistent naming, and API design issues
@filter="public-classes","^ *class [A-Z][a-zA-Z0-9_]*[^_].*:","*.py"
@filter="public-functions","^ *(def|async def) [a-z_][a-zA-Z0-9_]*[^_].*:","*.py"
@filter="module-docs","^ *\"\"\".*","*.py"
@filter="exports","^ *__all__\s*=.*","*.py"
@filter="comments","^ *#.*","*.py"
@filter="markdown-content",".*","README.md"
@output-line-numbers=false
@copy-to-clipboard=true
@show-excluded=false
-**
+README.md
+blobify/*.py

[api-surface:default]
# Extract public API surface - classes, functions, and their signatures from Python files
## This output contains the public API surface including class definitions, function signatures, async functions, export declarations, imports, and module documentation from Python files
## Analyze the public API design and identify breaking changes or improvements
## Focus on backwards compatibility and API consistency
@filter="public-classes","^ *class\s+[A-Z]\w*.*:","*.py"
@filter="public-functions","^ *def\s+[a-z_]\w*.*:","*.py"
@filter="public-async","^ *async\s+def\s+[a-z_]\w*.*:","*.py"
@filter="exports","^ *__all__\s*=.*","*.py"
@filter="imports","^ *(from\s+\w+.*import.*|import\s+\w+.*)","*.py"
@filter="module-docs","^ *\"\"\".*|^ *'''.*","*.py"
@output-line-numbers=false

[structure-overview:default]
# High-level code structure for quick understanding
## This output contains high-level Python code structure including class definitions, main functions, constructors, special methods, imports, and constants
## Provide architectural overview and identify design patterns used in the codebase
## Focus on code organization, module structure, and high-level flow
@filter="classes","^ *class\s+\w+.*:","*.py"
@filter="main-functions","^ *def\s+(main|__main__|run|execute|start).*:","*.py"
@filter="init-methods","^ *def\s+__init__.*:","*.py"
@filter="special-methods","^ *def\s+__\w+__.*:","*.py"
@filter="imports","^ *(from\s+\w+.*import.*|import\s+\w+.*)","*.py"
@filter="constants","^ *[A-Z_][A-Z0-9_]*\s*=.*","*.py"
@output-line-numbers=false

# Example that can be used to selectively build up a context from individual "mixins"

[nothing]
# Example context that returns nothing
## This output contains no files and serves as a base context for inheritance
## Use this as a starting point for building custom contexts through inheritance
@show-excluded=false
-**
@output-index=false

[test1]
## This output contains the project license file
## Review licensing terms and ensure compliance with project requirements
+LICENSE

[test2]
## This output contains the project README documentation
## Review the main project documentation for completeness and clarity
+README.md

[test3:nothing,test1,test2]
# Will only include LICENSE and README.md
## This output contains only the LICENSE file and README documentation through context inheritance
## Focus on project overview, licensing, and basic documentation quality

[clean-output:default]
# Clean output with minimal noise
## This output contains project files with minimal metadata and clean formatting suitable for sharing
## Optimized for clean presentation without debug information or metadata clutter
@show-excluded=false
@output-metadata=false
@output-line-numbers=false
@copy-to-clipboard=true

[debug-mode:default]
# Debug mode with verbose output
## This output contains project files with debug information enabled, detailed metadata, and no data scrubbing
## Use for detailed analysis and debugging with full context and metadata
@debug=true
@enable-scrubbing=false
@output-metadata=true

[clipboard-ready:default]
# Ready for clipboard with clean output
## This output contains project files formatted for clipboard sharing with clean presentation and no metadata
## Optimized for sharing via clipboard with minimal formatting overhead
@copy-to-clipboard=true
@show-excluded=false
@output-metadata=false

[file-export:default]
# Configuration for file export
## This output contains project files exported to a specific filename with detailed metadata for archival purposes
## Use for creating comprehensive project exports with full metadata for documentation
@output-filename=project-export.txt
@show-excluded=false
@output-metadata=true

[todo-finder]
# Find all TODOs, FIXMEs, and similar markers across all file types
## This output contains all TODO, FIXME, XXX, HACK, NOTE, and WARNING comments found across all project files with line numbers
## Identify outstanding work items, technical debt, and areas requiring attention
## Focus on prioritizing and categorizing the identified issues
@filter="todos","(TODO|FIXME|XXX|HACK|NOTE|WARNING)"
@show-excluded=false
@output-line-numbers=true
@copy-to-clipboard=true
+**

[yaml-config]
# Extract YAML configuration patterns
## This output contains YAML configuration key definitions extracted from .yml and .yaml files
## Analyze configuration structure and identify potential issues or improvements
## Focus on configuration consistency and best practices
@filter="yaml-keys","^\\s*[a-zA-Z][a-zA-Z0-9_-]*\\s*:","*.yml"
@filter="yaml-keys","^\\s*[a-zA-Z][a-zA-Z0-9_-]*\\s*:","*.yaml"
@show-excluded=false
@output-line-numbers=false
+*.yml
+*.yaml

[python-only:default]
# Python-specific analysis
## This output contains Python function definitions, class definitions, and import statements from all Python files
## Perform Python-specific code analysis focusing on language best practices
## Identify Pythonic patterns, potential optimizations, and code quality improvements
@filter="functions","^\\s*(def|async def)\\s+","*.py"
@filter="classes","^\\s*class\\s+","*.py"
@filter="imports","^\\s*(import|from)\\s+","*.py"
@show-excluded=false
+*.py
