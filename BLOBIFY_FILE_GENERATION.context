# Create .blobify Configuration Files

You are an expert at creating `.blobify` configuration files. Your task is to analyse the provided codebase and create appropriate `.blobify` configurations that will help users efficiently package and analyse their code with AI assistants.

## About .blobify Files

A `.blobify` file configures how the blobify tool packages codebases into single text files for AI consumption. It supports:

- **File inclusion/exclusion patterns** using glob syntax
- **Default command-line options** for consistent behaviour
- **Content filters** for extracting specific code patterns
- **Named contexts** for different analysis scenarios
- **Context inheritance** for reusable configurations
- **AI/LLM instructions** for describing what contexts contain

## Syntax Reference

### Basic Patterns
```
+pattern    # Include files matching pattern
-pattern    # Exclude files matching pattern
@option=value   # Set default command-line option
## instruction  # Add AI/LLM description (double-hash)
# comment    # Regular comment (single-hash)
```

### Context Definitions
```
[context-name]           # Simple context
[context-name:parent]    # Single inheritance
[context-name:p1,p2]     # Multiple inheritance
```

### Content Filters (CSV format)
```
@filter="name","regex","filepattern"    # File-targeted filter
@filter="name","regex"                  # All files filter
```

### Available Options
```
@copy-to-clipboard=true/false      # Copy output to clipboard
@debug=true/false                  # Enable debug output
@output-content=true/false         # Include file contents
@output-index=true/false           # Include file index
@output-metadata=true/false        # Include file metadata
@output-line-numbers=true/false    # Add line numbers to content
@show-excluded=true/false          # Show excluded files in index
@suppress-timestamps=true/false    # Hide timestamps from output
@enable-scrubbing=true/false       # Enable content scrubbing
```

## Your Task

Create a simple, practical `.blobify` file with these basic contexts:

1. **Default context** - Include everything in the codebase
2. **Code context** - Source code and configuration only (no tests)
3. **Tests context** - Test files only
4. **CI/CD context** - Automation and deployment files (workflows, configs, scripts)
5. **Documentation context** - Documentation files only

Use the inheritance pattern:
- Create a "nothing" context that inherits from default [nothing: default] and excludes everything (`-**`)
- Create specific contexts that inherit from nothing and include relevant patterns

Consider common patterns for each context type:
- **Code**: Main source directories, package configuration, core library files
- **Tests**: Test directories, test runners, test configuration
- **CI/CD**: `.github/workflows/`, CI configs, deployment scripts, automation files
- **Documentation**: README files, docs directories, API documentation, guides

Remember:
- Blobify includes everything by default and automatically excludes gitignored files
- Use descriptive AI instructions that explain what each context contains (not what to do with it)
- Keep patterns simple and focused
- Set `@copy-to-clipboard=true` and `@show-excluded=false` on the default context
- For larger codebases, consider excluding line numbers, index, and metadata to reduce output size:
  - `@output-line-numbers=false`
  - `@output-index=false`
  - `@output-metadata=false`

## Usage Instructions

After creating the `.blobify` file, users can run:
```bash
# Use default context (everything)
blobify

# Use specific context
blobify --context code
blobify --context tests
blobify --context cicd
blobify --context docs

# Override options
blobify --context code --no-copy-to-clipboard
blobify --debug --show-excluded
```

Analyse the codebase structure and create the configuration accordingly.
