# Create .blobify Configuration Files

You are an expert at creating `.blobify` configuration files. Your task is to analyse the provided codebase and create appropriate `.blobify` configurations that will help users efficiently package and analyse their code with AI assistants.

## About .blobify Files

A `.blobify` file configures how the blobify tool packages codebases into single text files for AI consumption. It supports:

- **File inclusion/exclusion patterns** using glob syntax
- **Default command-line options** for consistent behaviour
- **Content filters** for extracting specific code patterns
- **Named contexts** for different analysis scenarios
- **Context inheritance** for reusable configurations
- **AI/LLM instructions** for guiding analysis

## Syntax Reference

### Basic Patterns
```
+pattern    # Include files matching pattern
-pattern    # Exclude files matching pattern
@option=value   # Set default command-line option
## instruction  # Add AI/LLM analysis instruction (double-hash)
# comment    # Regular comment (single-hash)
```

### Context Definitions
```
[context-name]           # Simple context
[context-name:parent]    # Single inheritance
[context-name:p1,p2]     # Multiple inheritance
```

### Content Filters (CSV format)
```
@filter="name","regex","filepattern"    # File-targeted filter
@filter="name","regex"                  # All files filter
```

### Common Options
```
@copy-to-clipboard=true/false
@debug=true/false
@output-content=true/false
@output-index=true/false
@output-metadata=true/false
@output-line-numbers=true/false
@show-excluded=true/false
@suppress-timestamps=true/false
@enable-scrubbing=true/false
```

## Your Task

1. **Analyse the codebase structure** to understand:
   - What programming languages and frameworks are used
   - How the project is organised (directory structure, naming conventions)
   - What types of files are present (source, tests, docs, config, build files)
   - What the project appears to be (web app, library, CLI tool, etc.)
   - Which files/directories should be excluded (generated, dependencies, caches)

2. **Create a comprehensive .blobify file** tailored to this specific codebase:
   - **Default context** with appropriate include/exclude patterns for the languages/frameworks found
   - **Multiple named contexts** for different analysis scenarios relevant to this type of project
   - **Content filters** that extract meaningful patterns from the specific languages used
   - **AI instructions** for each context that provide relevant guidance for this codebase
   - **Context inheritance** to avoid repetition and maintain consistency

3. **Create appropriate contexts** based on what you discover in the codebase

## Guidelines

### File Patterns
- Use `**` for recursive directory matching and `*` for filename wildcards
- Base your patterns on what you actually find in the codebase
- Always exclude discovered generated/build directories (node_modules/, __pycache__/, target/, dist/, etc.)
- Include project-specific configuration files that are actually present
- Include relevant dotfiles if they exist (.github/, .gitignore, etc.)
- Tailor extensions to the languages actually used in the project

### Content Filters
Create language and framework-appropriate filters based on the codebase. Examples by language:

**Python:** `"functions","^(def|class)","*.py"`, `"imports","^(import|from)","*.py"`
**JavaScript/TypeScript:** `"functions","^(function|const.*=>|class)","*.js"`, `"exports","^(export|module\\.exports)","*.js"`
**Java:** `"methods","^\\s*(public|private|protected).*\\s+(\\w+)\\s*\\(","*.java"`, `"classes","^(public\\s+)?class\\s+","*.java"`
**C#:** `"methods","^\\s*(public|private|protected).*\\s+(\\w+)\\s*\\(","*.cs"`, `"classes","^(public\\s+)?class\\s+","*.cs"`
**Go:** `"functions","^func\\s+","*.go"`, `"types","^type\\s+","*.go"`
**SQL:** `"queries","^(SELECT|INSERT|UPDATE|DELETE)","*.sql"`, `"ddl","^(CREATE|ALTER|DROP)","*.sql"`
**Config files:** `"settings","^[A-Z_][A-Z0-9_]*\\s*[:=]","*.yml,*.yaml,*.conf"`

Adapt these patterns to match what you find in the actual codebase.

### AI Instructions
Write context-specific AI instructions using `##` that reflect what you learned about the codebase:
- Describe what the codebase appears to be and what each context contains
- Provide analysis guidance specific to the technologies and patterns you found
- Mention domain-specific considerations relevant to this type of project
- Suggest what to look for based on the actual code structure and purpose

### Context Design
- Create a comprehensive default context based on the project structure you discovered
- Design specialised contexts that make sense for this specific type of project
- Use inheritance wisely to avoid repetition while maintaining clarity
- Name contexts descriptively based on their actual purpose for this codebase
- Order contexts from general to specific

## Example Structure

Adapt this structure to the actual codebase you're analysing:

```
# Default comprehensive context
## This codebase represents a [describe what you discovered]
## Focus on [identify key areas based on your analysis]
@copy-to-clipboard=true
@show-excluded=false
# Include patterns based on languages/frameworks found
+[source files you identified]
+[configuration files you discovered]
+[documentation files present]
# Exclude generated/build directories you found
-[build directories discovered]
-[dependency directories found]
-[cache/temp directories identified]

[context-name:default]
## [Purpose based on your analysis]
## [Specific guidance for this type of review]
# Modify patterns based on this context's purpose
@filter="pattern-name","regex-for-discovered-language","file-pattern"
+[relevant files for this context]
-[files to exclude for this context]
```

Now, please analyse the provided codebase and create a comprehensive `.blobify` configuration file following these guidelines.
